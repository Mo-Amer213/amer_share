import 'package:amer_share/pages/home.dart';
import 'package:amer_share/widgets/progress.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:timeago/timeago.dart' as timeago;

class Comments extends StatefulWidget {
  String postId;
  final String photoUrl;
  final String ownerId;
  final String username;
  final String userPhoto;

  Comments(
      {this.postId,
      this.photoUrl,
      this.ownerId,
      this.username,
      this.userPhoto});

  factory Comments.fromDocument(doc) {
    return Comments(
      postId: doc['postId'],
      photoUrl: doc['photoId'],
      ownerId: doc['ownerId'],
      username: doc['username'],
      userPhoto: doc['userPhoto'],
    );
  }

  @override
  CommentsState createState() => CommentsState(
      ownerId: this.ownerId,
      photoUrl: this.photoUrl,
      postId: this.postId,
      username: this.username,
     userPhoto: this.userPhoto);
}

class CommentsState extends State<Comments> {
  String postId;
  final String photoUrl;
  final String ownerId;
  final String username;
  final String userPhoto;
  List<Comment> comments = [];
  TextEditingController commentController = TextEditingController();

  CommentsState({this.postId, this.photoUrl, this.ownerId, this.username,this.userPhoto});

  @override
  Widget build(BuildContext context) {
    // comments = buildComments();
    // print(comments);
    // buildComments();
    return Scaffold(
      appBar: AppBar(
        title: Text('Comments'),
      ),
      body: Column(
        children: [
          Expanded(child: buildComments()),
          Divider(
            height: 0.0,
          ),
          buildTextFieldAndSendBtn(),
        ],
      ),
    );
  }

  Padding buildTextFieldAndSendBtn() {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Expanded(
            child: TextField(
              controller: commentController,
              decoration: InputDecoration(
                hintText: 'Write a comment.....',
                fillColor: Colors.grey.withAlpha(4),
                border: InputBorder.none,
                filled: true,
              ),
            ),
          ),
          MaterialButton(
            hoverColor: Colors.white,
            elevation: 0,
            color: Colors.white,
            onPressed: handleSendingComment,
            child: Text(
              'Send',
              style: TextStyle(color: Colors.blue, fontSize: 16),
            ),
          )
        ],
      ),
    );
  }

  handleSendingComment() {
    // print(postId.toString());

    commentsRef.document(postId).collection('userComments').add({
      'text': commentController.text,
      'timestamp': timestamp,
      'username': currentUser.username,
      'photoUrl': photoUrl,
      'ownerId': ownerId,
      'userPhoto':currentUser.userPhoto,
    });
    // when you send this comment you need to send An activity feed also To the Firebase and we will have a collection
    // called Activity Feed and this will be used for our ActivityFeed Screen this is important

    bool isPostOwner = currentUser.userId != ownerId;
    // that is mean that the notification only will be created only if the
    // the user is not the owner of the post
    if (isPostOwner) {
      feedsRef.document(ownerId).collection('feedItems').add({
        // hint this will use AutoGenerated Id ua_amer solved
        'type': 'comment',
        'username': currentUser.username, // hint this comes from the home
        'photoUrl': photoUrl,
        'postId': postId,
        'ownerId': ownerId,
        'userId': currentUser.userId,
        'userAvatarUrl': currentUser.userPhoto,
        'timestamp': timestamp,
        'commentContent': commentController.text,
      });
    }

    commentController.clear();
  }

  buildComments() {
    return Container(
      child: StreamBuilder(
          stream: commentsRef
              .document(postId)
              .collection('userComments')
              .orderBy('timestamp', descending: false)
              .snapshots(),
          builder: (context, AsyncSnapshot<QuerySnapshot> snapshot) {
            if (!snapshot.hasData) {
              return circularProgress(context);
            }
            List<Comment> comments = [];
            snapshot.data.documents.forEach((DocumentSnapshot element) {
              comments.add(Comment.fromDocument(element));
            });
            return ListView(
              children: comments,
            );
          }),
    );
  }
}

class Comment extends StatelessWidget {
  final String photoUrl;
  final String text;
  final String username;
  final String postId;
  final String userPhoto;
  final timestamp;

  Comment(
      {this.username,
      this.photoUrl,
      this.text,
      this.timestamp,
      this.postId,
      this.userPhoto});

  /// this is the normal constructor
  factory Comment.fromDocument(DocumentSnapshot doc) {
    return Comment(
      username: doc['username'],
      photoUrl: doc['photoUrl'],
      text: doc['text'],
      timestamp: doc['timestamp'],
      postId: doc['postId'],
      userPhoto: doc['userPhoto'],
    );
  }

  @override
  Widget build(BuildContext context) {
    // print(userPhoto.toString());
    return ListTile(
      title: Text(
        username.toString(),
        style: TextStyle(
            color: Colors.black, fontSize: 18, fontWeight: FontWeight.bold),
      ),
      subtitle: Text(' ${text.toString()} \n ${timeago.format(
        timestamp.toDate(),
      )}'),
      leading: CircleAvatar(
        backgroundColor: Colors.grey,
        backgroundImage: CachedNetworkImageProvider(userPhoto.toString()),
      ),
    );
  }
}
/*
return ListView(
          reverse: false,
          children: [
            ListTile(
              title: Text(
                'username',
                style: TextStyle(
                    color: Colors.black,
                    fontSize: 18,
                    fontWeight: FontWeight.bold),
              ),
              subtitle: Text(
                  'This is body of the comment \n ${timestamp.day}'),
              leading: CircleAvatar(
                backgroundColor: Colors.grey,
                backgroundImage: CachedNetworkImageProvider(photoUrl),
              ),
            ),
          ],
        );


///####################################
      title: Text(
        username,
        style: TextStyle(
            color: Colors.black, fontSize: 18, fontWeight: FontWeight.bold),
      ),
      subtitle: Text(text),
      leading: CircleAvatar(
        backgroundColor: Colors.grey,
        backgroundImage: CachedNetworkImageProvider(photoUrl),
      ),
    );
  }



 commentsRef.document(postId).collection('userComments').add({
      'text': commentController.text,
      'timestamp': timestamp,
      'username': username,
      'photoUrl': photoUrl,
      'ownerId': ownerId,
    });


 */
